// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func splitEvent2() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script type=\"text/javascript\">\n\t\t(() => {\n\t\t\tconst payerContainer = document.querySelector(\"#payer-container\")\n\t\t\tconst payerInput = document.querySelector(\"#payerSelector\")\n\n\t\t\tconst updatePayer = () => {\n\t\t\t\tconst payer = splitRuleSelector.value.split(\"-\")[0].toLowerCase()\n\t\t\t\tconst payerOptions = [...payerInput.options].map(obj => obj.value)\n\n\t\t\t\tif(payer == 'Unequally'){\n\t\t\t\t\tpayerContainer.classList.remove(\"hidden\")\n\t\t\t\t\tpayerContainer.classList.add(\"flex\")\n\t\t\t\t\tpayerInput.value = payerOptions[0]\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!payerContainer.classList.contains(\"hidden\")){\n\t\t\t\t\tpayerContainer.classList.remove(\"flex\")\n\t\t\t\t\tpayerContainer.classList.add(\"hidden\")\n\t\t\t\t}\n\t\t\t\tif(payer === \"you\"){\n\t\t\t\t\tpayerInput.value = payerOptions[0]\n\t\t\t\t}else if(payer === \"other\"){\n\t\t\t\t\tpayerInput.value = payerOptions[1]\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsplitRuleSelector.addEventListener(\"change\", ()=>{\n\t\t\t\tupdatePayer()\n\t\t\t})\n\t\t})()\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func splitEvent() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script type=\"text/javascript\">\n\t\t(() => {\n\t\t\tconst splitRuleSelector = document.querySelector(\"#splitRuleSelector\")\n\t\t\tconst ledger = document.querySelector(\"#ledger\")\n\t\t\tconst ledgerShares = document.querySelectorAll(\"#ledger-share\")\n\t\t\tconst totalInput = document.querySelector(\"#total\")\n\t\t\tconst descInput = document.querySelector(\"#description\")\n\t\t\tconst indicator = document.querySelector(\"#split-indicator\")\n\t\t\tconst submitButton = document.querySelector(\"#submit\")\n\n\t\t\tvar ledgerShareDone = false\n\n\t\t\tconst updateSplitIndicator = () => {\n\t\t\t\tconsole.log(totalInput.value)\n\t\t\t\tconsole.log(totalInput.defaultValue)\n\n\t\t\t\tif(totalInput.value === ''){\n\t\t\t\t\tindicator.innerHTML = ''\n\t\t\t\t\tledgerShares.forEach((share) => {\n\t\t\t\t\t\tshare.value = ''\n\t\t\t\t\t})\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tconst currency = document.querySelector(\"#currency\").value\n\t\t\t\tconst total = Number(totalInput.value)\n\t\t\t\tlet sum = 0\n\t\t\t\tledgerShares.forEach((share) => {\n\t\t\t\t\tif(share.value !== '' || share.value !== share.defaultValue){\n\t\t\t\t\t\tsum += Number(share.value)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tconsole.log(sum)\n\n\t\t\t\tif(sum === total){\n\t\t\t\t\tindicator.innerHTML = \"<p class=\\\"text-green-700\\\">Total $0 \" + currency + \" left.</p>\"\n\t\t\t\t\tledgerShareDone = true\n\t\t\t\t}else{\n\t\t\t\t\tremaining = (total - sum).toFixed(2)\n\t\t\t\t\tindicator.innerHTML = \"<p class=\\\"text-red-700\\\">Total $\"+ remaining + \" \" + currency + \" left.</p>\"\n\t\t\t\t\tledgerShareDone = false\n\t\t\t\t}\n\t\t\t\tcheckAllInput()\n\t\t\t}\n\n\t\t\tconst checkAllInput = () => {\n\t\t\t\tlet doneDesc = (descInput.value !== '')\n\t\t\t\tlet doneTotal = (totalInput.value !== '')\n\t\t\t\t\n\t\t\t\tlet ledgerHidden = ledger.classList.contains(\"hidden\")\n\t\t\t\t\n\t\t\t\tlet done = doneDesc && doneTotal\n\t\t\t\tif(!ledgerHidden)\n\t\t\t\t\tdone = done && ledgerShareDone\n\t\t\t\t\n\t\t\t\tif(done)\n\t\t\t\t\tsubmitButton.disabled = false\n\t\t\t\telse\n\t\t\t\t\tsubmitButton.disabled = true\n\t\t\t}\n\n\t\t\tsplitRuleSelector.addEventListener(\"change\", (event) => {\n\t\t\t\tif(event.target.value === \"Unequally\"){\n\t\t\t\t\tledger.classList.remove(\"hidden\")\n\t\t\t\t\tledger.classList.add(\"flex\")\n\n\t\t\t\t\tledgerShares.forEach((share) => {\n\t\t\t\t\t\tshare.value = null\n\t\t\t\t\t})\n\t\t\t\t\tledgerShareDone = false\n\t\t\t\t}else{\n\t\t\t\t\tledger.classList.remove(\"flex\")\n\t\t\t\t\tledger.classList.add(\"hidden\")\n\t\t\t\t}\n\t\t\t\tupdateSplitIndicator()\n\t\t\t})\n\n\t\t\tdescInput.addEventListener(\"change\", () => {\n\t\t\t\tcheckAllInput()\n\t\t\t})\n\n\t\t\ttotalInput.addEventListener(\"change\", () => {\n\t\t\t\tupdateSplitIndicator()\n\t\t\t})\n\n\t\t\tledgerShares.forEach((share) => {\n\t\t\t\tshare.addEventListener(\"change\", updateSplitIndicator)\n\t\t\t})\n\t\t})()\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
